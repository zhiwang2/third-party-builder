# .gitlab-ci.yml

stages:
  - build

variables:
  # vcpkg 会被安装到 CI_PROJECT_DIR/vcpkg，并利用 GitLab cache 进行缓存
  VCPKG_ROOT: "${CI_PROJECT_DIR}/vcpkg"
  # 设置 vcpkg 环境变量，使其在全局可用
  VCPKG_DEFAULT_TRIPLET: "x64-windows-static" # 只是一个默认值，会在各 job 中覆盖

# --- GitLab CI 缓存设置 ---
# 缓存 vcpkg 工具本身和已编译的包
cache:
  key: "${CI_JOB_NAME}"
  paths:
    - "${VCPKG_ROOT}"

# --- Windows 构建任务 (产出 .dll/.lib) ---
build-opencv-windows:
  stage: build
  tags:
    - windows-vs2022
  script:
    # 1. 设置 Windows 平台对应的 vcpkg "triplet"
    - $env:VCPKG_DEFAULT_TRIPLET = "x64-windows"

    # 2. 如果缓存不存在，则克隆并安装 vcpkg
    - if (-not (Test-Path $env:VCPKG_ROOT)) { git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT }
    - Push-Location $env:VCPKG_ROOT
    - if (-not (Test-Path "vcpkg.exe")) { ./bootstrap-vcpkg.bat }
    - Pop-Location
    
    # 3. vcpkg 安装依赖 (核心步骤)
    # vcpkg 会读取 vcpkg.json 文件，并安装指定的 OpenCV 最小集
    # 如果有缓存，这一步会非常快
    - $env:VCPKG_ROOT/vcpkg install

    # 4. 将产物复制到 artifacts 目录以便归档
    - mkdir artifacts
    - Copy-Item -Path "$env:VCPKG_ROOT/installed/x64-windows/bin/*.dll" -Destination "artifacts/"
    - Copy-Item -Path "$env:VCPKG_ROOT/installed/x64-windows/lib/*.lib" -Destination "artifacts/"
    - Copy-Item -Path "$env:VCPKG_ROOT/installed/x64-windows/include/opencv4" -Destination "artifacts/include/" -Recurse

  artifacts:
    name: "opencv-4.12-minimal-windows-${CI_COMMIT_SHORT_SHA}"
    paths:
      - artifacts/
    expire_in: 1 week

# --- macOS 构建任务 (产出 .dylib) ---
build-opencv-macos:
  stage: build
  tags:
    - macos
  script:
    # 1. 设置 macOS 平台对应的 vcpkg "triplet"
    - export VCPKG_DEFAULT_TRIPLET=x64-osx

    # 2. 如果缓存不存在，则克隆并安装 vcpkg
    - '[ ! -d "${VCPKG_ROOT}" ] && git clone https://github.com/microsoft/vcpkg.git "${VCPKG_ROOT}"'
    - 'cd "${VCPKG_ROOT}" && [ ! -f "vcpkg" ] && ./bootstrap-vcpkg.sh && cd ..'
    
    # 3. vcpkg 安装依赖
    - "${VCPKG_ROOT}/vcpkg" install

    # 4. 将产物复制到 artifacts 目录
    - mkdir -p artifacts/lib artifacts/include
    - cp -v ${VCPKG_ROOT}/installed/x64-osx/lib/*.dylib artifacts/lib/
    - cp -R ${VCPKG_ROOT}/installed/x64-osx/include/opencv4 artifacts/include/

  artifacts:
    name: "opencv-4.12-minimal-macos-${CI_COMMIT_SHORT_SHA}"
    paths:
      - artifacts/
    expire_in: 1 week

# --- Linux 构建任务 (产出 .so) ---
build-opencv-linux:
  stage: build
  image: ubuntu:22.04 # 使用一个标准的 Linux 镜像
  tags:
    - linux
  before_script:
    - apt-get update && apt-get install -y git curl zip unzip tar pkg-config build-essential
  script:
    # 1. 设置 Linux 平台对应的 vcpkg "triplet"
    - export VCPKG_DEFAULT_TRIPLET=x64-linux

    # 2. 如果缓存不存在，则克隆并安装 vcpkg
    - '[ ! -d "${VCPKG_ROOT}" ] && git clone https://github.com/microsoft/vcpkg.git "${VCPKG_ROOT}"'
    - 'cd "${VCPKG_ROOT}" && [ ! -f "vcpkg" ] && ./bootstrap-vcpkg.sh && cd ..'
    
    # 3. vcpkg 安装依赖
    - "${VCPKG_ROOT}/vcpkg" install
    
    # 4. 将产物复制到 artifacts 目录
    - mkdir -p artifacts/lib artifacts/include
    - cp -v ${VCPKG_ROOT}/installed/x64-linux/lib/*.so* artifacts/lib/
    - cp -R ${VCPKG_ROOT}/installed/x64-linux/include/opencv4 artifacts/include/
  
  artifacts:
    name: "opencv-4.12-minimal-linux-${CI_COMMIT_SHORT_SHA}"
    paths:
      - artifacts/
    expire_in: 1 week
