# .github/workflows/OpenCV_Linux_GPU.yml
name: Build Extended OpenCV (Linux GPU Only)

on:
  push:
    branches: [ main ]
    paths:
      # 只有这些文件/目录变化时才触发
      - '.github/workflows/OpenCV_Linux_GPU.yml'
      - 'ci/opencv/**'
      - 'scripts/opencv/**'
      - 'CMakeLists.txt'
      - 'opencv/**'
      - 'opencv_contrib/**'
  pull_request:
    branches: [ main ]
    paths:
      - '.github/workflows/OpenCV_Linux_GPU.yml'
      - 'ci/opencv/**'
      - 'scripts/opencv/**'
      - 'CMakeLists.txt'
      - 'opencv/**'
      - 'opencv_contrib/**'
  workflow_dispatch:   # 手动触发仍然可用

# 防止重复运行：新提交会自动取消旧 run
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  OPENCV_VERSION: '4.12.0'
  INSTALL_DIR: ${{ github.workspace }}/install

jobs:
  build-gpu:
    name: Build GPU for Linux
    runs-on: ubuntu-latest
    container: nvidia/cuda:12.1.1-cudnn8-devel-ubuntu22.04

    env:
      OPENCV_MODULES_LIST: "core,imgproc,imgcodecs,highgui,ml,quality,features2d,flann,ximgproc,calib3d,photo,objdetect,text,dnn,phase_unwrapping,xfeatures2d,line_descriptor,bgsegm,img_hash,gapi,cudaarithm,cudabgsegm,cudacodec,cudafeatures2d,cudafilters,cudaimgproc,cudalegacy,cudawarping,cudev"

    steps:
      - name: Install container build dependencies
        shell: bash
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update && apt-get install -y --no-install-recommends \
            git cmake build-essential python3 python3-pip python3-numpy \
            libcublas-dev-12 \
            libcudnn8-dev \
            libatlas-base-dev gfortran

      - name: Checkout OpenCV Source Code
        uses: actions/checkout@v4
        with:
          repository: opencv/opencv
          ref: ${{ env.OPENCV_VERSION }}
          path: opencv

      - name: Checkout OpenCV Contrib Source Code
        uses: actions/checkout@v4
        with:
          repository: opencv/opencv_contrib
          ref: ${{ env.OPENCV_VERSION }}
          path: opencv_contrib

      - name: Configure CMake (Linux with CUDA)
        shell: bash
        run: |
          cd ${{ github.workspace }}/opencv
          echo "--- Verifying opencv_contrib modules path ---"
          CONTRIB_MODULES_PATH="${{ github.workspace }}/opencv_contrib/modules"
          echo "Expected path: ${CONTRIB_MODULES_PATH}"
          ls -la "${CONTRIB_MODULES_PATH}"
          echo "--- Verification end ---"

          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DOPENCV_EXTRA_MODULES_PATH="${CONTRIB_MODULES_PATH}" \
            -DBUILD_LIST="${{ env.OPENCV_MODULES_LIST }}" \
            -DWITH_CUDA=ON \
            -DWITH_CUDNN=ON \
            -DOPENCV_DNN_CUDA=ON \
            -DCUDA_ARCH_BIN="7.5 8.0 8.6" \
            -DBUILD_ZLIB=OFF -DBUILD_PNG=OFF -DBUILD_JPEG=OFF -DBUILD_TIFF=OFF -DBUILD_WEBP=OFF \
            -DBUILD_SHARED_LIBS=ON -DBUILD_opencv_world=ON \
            -DWITH_IPP=OFF -DWITH_TBB=OFF -DWITH_OPENMP=OFF -DWITH_QT=OFF -DWITH_FFMPEG=OFF \
            -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_DOCS=OFF \
            -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }}

      - name: Build and Install OpenCV
        shell: bash
        run: |
          cd ${{ github.workspace }}/opencv
          cmake --build build --config Release --target install -j4

      - name: Upload OpenCV Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: opencv-world-gpu-linux
          path: ${{ env.INSTALL_DIR }}
          retention-days: 7
