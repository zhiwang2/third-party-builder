# .github/workflows/OpenCV_Linux_GPU_Final.yml

name: Build Extended OpenCV (Linux GPU Only)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  OPENCV_VERSION: '4.12.0'
  INSTALL_DIR: ${{ github.workspace }}/install

jobs:
  build-gpu:
    name: Build GPU for Linux
    runs-on: ubuntu-latest
    container: nvidia/cuda:12.1.1-cudnn8-devel-ubuntu22.04

    env:
      OPENCV_MODULES_LIST: "core,imgproc,imgcodecs,highgui,ml,quality,features2d,flann,ximgproc,calib3d,photo,objdetect,text,dnn,phase_unwrapping,xfeatures2d,line_descriptor,bgsegm,img_hash,gapi,cudaarithm,cudabgsegm,cudacodec,cudafeatures2d,cudafilters,cudaimgproc,cudalegacy,cudawarping,cudev"

    steps:
      - name: Install basic build dependencies
        shell: bash
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update && apt-get install -y --no-install-recommends \
            git cmake build-essential python3 python3-pip python3-numpy \
            libatlas-base-dev gfortran

      # 【终极修正】使用最可靠的 git clone 代替 actions/checkout
      - name: Clone OpenCV and Contrib repositories
        shell: bash
        run: |
          set -e
          echo "Cloning OpenCV repository..."
          git clone --depth 1 --branch ${{ env.OPENCV_VERSION }} https://github.com/opencv/opencv.git
          
          echo "Cloning OpenCV Contrib repository..."
          git clone --depth 1 --branch ${{ env.OPENCV_VERSION }} https://github.com/opencv/opencv_contrib.git

      - name: Configure CMake (Linux with CUDA)
        shell: bash
        run: |
          # 进入 opencv 目录
          cd opencv

          # 【法医级诊断】在运行 CMake 之前，打印出 contrib modules 目录的完整内容
          echo "--- Verifying contents of opencv_contrib/modules ---"
          ls -R ../opencv_contrib/modules
          echo "--- Verification End ---"

          # 现在路径是相对于当前目录的 ../opencv_contrib/modules
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules \
            -DBUILD_LIST="${{ env.OPENCV_MODULES_LIST }}" \
            -DWITH_CUDA=ON \
            -DWITH_CUDNN=ON \
            -DOPENCV_DNN_CUDA=ON \
            -DCUDA_ARCH_BIN="7.5 8.0 8.6" \
            -DBUILD_ZLIB=OFF -DBUILD_PNG=OFF -DBUILD_JPEG=OFF -DBUILD_TIFF=OFF -DBUILD_WEBP=OFF \
            -DBUILD_SHARED_LIBS=ON -DBUILD_opencv_world=ON \
            -DWITH_IPP=OFF -DWITH_TBB=OFF -DWITH_OPENMP=OFF -DWITH_QT=OFF -DWITH_FFMPEG=OFF \
            -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DBUILD_DOCS=OFF \
            -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }}

      - name: Build and Install OpenCV
        shell: bash
        run: |
          # 进入 opencv 目录
          cd opencv
          cmake --build build --config Release --target install -j4

      - name: Upload OpenCV Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: opencv-world-gpu-linux
          path: ${{ env.INSTALL_DIR }}
          retention-days: 7
