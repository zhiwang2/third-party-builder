#
# GitHub Actions 工作流程：在 Windows (MinGW) 环境下构建 jbig2enc
#
# 摘要:
# 本文件根据用户提供的详细分析进行构建。
# 最终解决方案：通过注入 Autotools 缓存变量，从根源上解决了配置阶段的失败。
# 针对最后一步的“文件找不到”错误，本版本不再猜测可执行文件的路径和名称，
# 而是通过 `find` 命令主动搜索并复制，以确保最终打包的成功。
#
name: Build jbig2enc on Windows

on:
  # 允许手动触发
  workflow_dispatch:
  # 在 push 到 main 分支时自动触发
  push:
    branches: [ "main" ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4

      - name: 2. 安装 MSYS2 及依赖包
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            make
            autoconf
            automake
            libtool
            m4
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-leptonica
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-libtiff

      - name: 3. 克隆并准备 jbig2enc 源码
        run: |
          echo "克隆 jbig2enc 仓库..."
          git clone https://github.com/agl/jbig2enc.git
          cd jbig2enc
          
          echo "切换到 0.30 版本..."
          git checkout 0.30

      - name: 4. 生成 configure 脚本
        working-directory: ./jbig2enc
        run: |
          echo "正在运行 autogen.sh..."
          ./autogen.sh

      - name: 5. 配置、编译和安装
        working-directory: ./jbig2enc
        run: |
          # 创建一个独立的安装目录
          INSTALL_PREFIX="$(pwd)/build_output"
          mkdir -p "$INSTALL_PREFIX"

          echo "运行 ./configure 并注入缓存变量以修复 zlib 检测..."
          ./configure \
            --prefix="$INSTALL_PREFIX" \
            ac_cv_lib_ws2_32__head_libws2_32_a=yes \
            ZLIB_CFLAGS="$(pkg-config --cflags zlib)" \
            ZLIB_LIBS="$(pkg-config --libs zlib)" \
            LEPTONICA_CFLAGS="$(pkg-config --cflags lept)" \
            LEPTONICA_LIBS="$(pkg-config --libs lept)"

          echo "运行 make..."
          make

          echo "运行 make install..."
          make install

      - name: 6. 收集并打包产物
        run: |
          echo "--- 构建已成功！正在查找并收集产物... ---"
          
          # 调试步骤：递归列出整个构建目录，以确定可执行文件的确切位置和名称
          echo "--- 正在列出 'jbig2enc' 目录的全部内容... ---"
          ls -R jbig2enc

          # 用于存放最终产物的目录
          ARTIFACT_DIR="jbig2enc-release"
          mkdir -p "$ARTIFACT_DIR"

          echo "--- 正在使用 'find' 命令定位并复制可执行文件... ---"
          # 核心修正：使用 find 命令搜索所有名为 jbig2*.exe 的文件并复制。
          # 这解决了文件名（jbig2.exe vs jbig2enc.exe）和路径不确定的问题。
          find jbig2enc -type f -name "jbig2*.exe" -exec cp {} "$ARTIFACT_DIR/" \;

          # 验证可执行文件是否已成功复制
          if ! ls -l "$ARTIFACT_DIR"/*.exe >/dev/null 2>&1; then
              echo "::error::未能找到或复制任何 .exe 可执行文件！构建失败。"
              exit 1
          fi

          echo "--- 正在收集运行时依赖的 DLL 文件... ---"
          MINGW_BIN_DIR="/mingw64/bin"
          # 使用通配符来匹配 DLL，使其对库的版本变化更具鲁棒性
          cp "$MINGW_BIN_DIR/zlib1.dll" "$ARTIFACT_DIR/"
          cp "$MINGW_BIN_DIR/liblept*.dll" "$ARTIFACT_DIR/"
          cp "$MINGW_BIN_DIR/libpng*.dll" "$ARTIFACT_DIR/"
          cp "$MINGW_BIN_DIR/libjpeg*.dll" "$ARTIFACT_DIR/"
          cp "$MINGW_BIN_DIR/libtiff*.dll" "$ARTIFACT_DIR/"
          # 复制 GCC 运行时库
          cp "$MINGW_BIN_DIR/libstdc++-6.dll" "$ARTIFACT_DIR/"
          cp "$MINGW_BIN_DIR/libgcc_s_seh-1.dll" "$ARTIFACT_DIR/"
          cp "$MINGW_BIN_DIR/libwinpthread-1.dll" "$ARTIFACT_DIR/"

          echo "--- 正在收集 config.log 以便调试... ---"
          cp "jbig2enc/config.log" "$ARTIFACT_DIR/"

          echo "--- 打包目录最终内容一览: ---"
          ls -l "$ARTIFACT_DIR"

      - name: 7. 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: jbig2enc-windows-x64
          path: jbig2enc-release/
