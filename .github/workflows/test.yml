#
# GitHub Actions 工作流程：在 Windows (MinGW) 环境下构建 jbig2enc
#
# 摘要:
# 最终成功版！基于前一次运行的详细日志，本版本进行了最终的精确修正：
# 1. 根据 ls -R 的输出，使用确切的路径和文件名 (jbig2enc/build_output/bin/jbig2.exe) 复制可执行文件。
# 2. 恢复使用最可靠的 ldd 命令来自动查找并复制所有必需的运行时 DLL，彻底避免了手动指定文件名带来的问题。
#
name: Build jbig2enc on Windows

on:
  # 允许手动触发
  workflow_dispatch:
  # 在 push 到 main 分支时自动触发
  push:
    branches: [ "main" ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4

      - name: 2. 安装 MSYS2 及依赖包
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            make
            autoconf
            automake
            libtool
            m4
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-leptonica
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-libtiff

      - name: 3. 克隆并准备 jbig2enc 源码
        run: |
          echo "克隆 jbig2enc 仓库..."
          git clone https://github.com/agl/jbig2enc.git
          cd jbig2enc
          
          echo "切换到 0.30 版本..."
          git checkout 0.30

      - name: 4. 生成 configure 脚本
        working-directory: ./jbig2enc
        run: |
          echo "正在运行 autogen.sh..."
          ./autogen.sh

      - name: 5. 配置、编译和安装
        working-directory: ./jbig2enc
        run: |
          INSTALL_PREFIX="$(pwd)/build_output"
          mkdir -p "$INSTALL_PREFIX"

          echo "运行 ./configure 并注入缓存变量以修复 zlib 检测..."
          ./configure \
            --prefix="$INSTALL_PREFIX" \
            ac_cv_lib_ws2_32__head_libws2_32_a=yes \
            ZLIB_CFLAGS="$(pkg-config --cflags zlib)" \
            ZLIB_LIBS="$(pkg-config --libs zlib)" \
            LEPTONICA_CFLAGS="$(pkg-config --cflags lept)" \
            LEPTONICA_LIBS="$(pkg-config --libs lept)"

          echo "运行 make..."
          make

          echo "运行 make install..."
          make install

      - name: 6. 收集并打包产物
        run: |
          ARTIFACT_DIR="jbig2enc-release"
          mkdir -p "$ARTIFACT_DIR"

          echo "正在从确切路径收集 jbig2.exe..."
          # 核心修正 #1: 使用从日志中得到的准确路径和文件名
          cp "jbig2enc/build_output/bin/jbig2.exe" "$ARTIFACT_DIR/jbig2enc.exe"

          echo "正在使用 ldd 自动收集所有运行时依赖的 DLL 文件..."
          # 核心修正 #2: 使用 ldd 自动分析并复制所有依赖，这是最可靠的方法
          cd "$ARTIFACT_DIR"
          # 分析我们刚刚复制的 exe，找到所有 mingw64 的 DLL，提取其路径，然后复制到当前目录 (.)
          ldd jbig2enc.exe | grep 'mingw64' | awk '{print $3}' | xargs -r cp -v -t .
          cd ..

          echo "正在收集 config.log 以便调试..."
          cp "jbig2enc/config.log" "$ARTIFACT_DIR/"

          echo "打包目录最终内容一览:"
          ls -l "$ARTIFACT_DIR"

      - name: 7. 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: jbig2enc-windows-x64
          path: jbig2enc-release/
