#
# GitHub Actions 工作流程：在 Windows (MinGW) 环境下构建 jbig2enc
#
# 摘要:
# 本文件根据用户提供的详细分析进行构建。核心解决方案是：
# 1. 使用 MSYS2/MINGW64 作为构建环境。
# 2. 绕过 jbig2enc 的 configure 脚本中存在的 zlib 检测缺陷。
#    - 最终策略：直接对 configure 脚本进行精确打补丁，将导致致命退出的 "exit 1" 注释掉。
#      此版本修正了之前 sed 命令中因模式匹配错误而导致补丁失效的问题。
# 3. 显式传入 ZLIB 和 Leptonica 的编译/链接标志。
# 4. 最终打包 jbig2enc.exe 及其所有运行时依赖的 DLL 文件。
#
name: Build jbig2enc on Windows

on:
  # 允许手动触发
  workflow_dispatch:
  # 在 push 到 main 分支时自动触发
  push:
    branches: [ "main" ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4

      - name: 2. 安装 MSYS2 及依赖包
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            make
            autoconf
            automake
            libtool
            m4
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-zlib
            mingw-w64-x86_64-leptonica
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-libjpeg-turbo
            mingw-w64-x86_64-libtiff

      - name: 3. 克隆并准备 jbig2enc 源码
        run: |
          echo "克隆 jbig2enc 仓库..."
          git clone https://github.com/agl/jbig2enc.git
          cd jbig2enc
          
          echo "切换到 0.30 版本..."
          git checkout 0.30

      - name: 4. 生成 configure 脚本
        working-directory: ./jbig2enc
        run: |
          echo "正在运行 autogen.sh..."
          ./autogen.sh

      - name: 5. 直接修补 configure 脚本以规避 zlib 检测错误
        working-directory: ./jbig2enc
        run: |
          echo "正在为 configure 脚本打补丁，注释掉 zlib 检测失败后的 exit 1..."
          # 核心修正：使用正确的文本模式 "zlib not detected\." 来查找脚本内的代码，
          # 而不是匹配其运行时输出 "Error! zlib not detected."。
          # 此 sed 命令查找包含 "zlib not detected." 的行，
          # 然后通过 'n' 命令移动到下一行，并将该行的 'exit 1' 替换为 '# exit 1' (注释掉)。
          sed -i 's/echo.*zlib not detected\..*/&\n# Patched by GitHub Action to prevent exit\n#exit 1/' configure
          echo "补丁应用成功。"
          # 验证补丁是否成功
          echo "验证补丁："
          grep -C 3 "zlib not detected" configure


      - name: 6. 配置、编译和安装
        working-directory: ./jbig2enc
        run: |
          # 创建一个独立的安装目录，便于后续打包
          INSTALL_PREFIX="$(pwd)/build_output"
          mkdir -p "$INSTALL_PREFIX"

          echo "正在获取 ZLIB 和 Leptonica 的 CFLAGS 和 LIBS..."
          # 显式从 pkg-config 获取并传递配置，确保 configure 能正确找到依赖
          export ZLIB_CFLAGS="$(pkg-config --cflags zlib)"
          export ZLIB_LIBS="$(pkg-config --libs zlib)"
          export LEPTONICA_CFLAGS="$(pkg-config --cflags lept)"
          export LEPTONICA_LIBS="$(pkg-config --libs lept)"

          echo "运行 ./configure..."
          # --prefix 指定安装路径
          # LDFLAGS 需要包含 zlib 库路径，以帮助链接阶段的测试
          LDFLAGS="$LDFLAGS $(pkg-config --libs-only-L zlib)" ./configure --prefix="$INSTALL_PREFIX"

          echo "运行 make..."
          make

          echo "运行 make install..."
          make install

      - name: 7. 收集并打包产物
        run: |
          # 用于存放最终产物的目录
          ARTIFACT_DIR="jbig2enc-release"
          mkdir -p "$ARTIFACT_DIR"

          INSTALL_BIN_DIR="jbig2enc/build_output/bin"
          MINGW_BIN_DIR="/mingw64/bin"

          echo "正在收集 jbig2enc.exe..."
          cp "$INSTALL_BIN_DIR/jbig2enc.exe" "$ARTIFACT_DIR/"

          echo "正在收集运行时依赖的 DLL 文件..."
          # 恢复为明确的 DLL 复制列表，这与您最初的成功策略一致
          cp "$MINGW_BIN_DIR/zlib1.dll" "$ARTIFACT_DIR/"
          cp "$MINGW_BIN_DIR/liblept-5.dll" "$ARTIFACT_DIR/" # Leptonica 库名通常是 liblept-5.dll
          cp "$MINGW_BIN_DIR/libpng16-16.dll" "$ARTIFACT_DIR/"
          cp "$MINGW_BIN_DIR/libjpeg-8.dll" "$ARTIFACT_DIR/"
          cp "$MINGW_BIN_DIR/libtiff-5.dll" "$ARTIFACT_DIR/"
          # 复制 GCC 运行时库
          cp "$MINGW_BIN_DIR/libstdc++-6.dll" "$ARTIFACT_DIR/"
          cp "$MINGW_BIN_DIR/libgcc_s_seh-1.dll" "$ARTIFACT_DIR/"
          cp "$MINGW_BIN_DIR/libwinpthread-1.dll" "$ARTIFACT_DIR/"

          echo "正在收集 config.log 以便调试..."
          cp "jbig2enc/config.log" "$ARTIFACT_DIR/"

          echo "打包目录内容一览:"
          ls -l "$ARTIFACT_DIR"

      - name: 8. 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: jbig2enc-windows-x64
          path: jbig2enc-release/
